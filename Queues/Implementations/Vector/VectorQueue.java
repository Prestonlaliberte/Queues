package Queues.Implementations.Vector;import java.util.Vector;import Queues.QueueInterface;/** * A class that implements the ADT queue by using an instance of Vector. *  * @author Frank M. Carrano * @version 2.0 */public class VectorQueue<T> implements QueueInterface<T>,                                        java.io.Serializable{  private Vector<T> queue; // queueï¿½s front entry is first in the vector    public VectorQueue()  {    queue = new Vector<T>(); // vector doubles in size if necessary  } // end default constructor    public VectorQueue(int initialCapacity)  {    queue = new Vector<T>(initialCapacity);  } // end constructor	// 24.19  	public void enqueue(T newEntry)	{	  queue.add(newEntry);	} // end enqueue	// 24.20  	public T getFront()	{	  T front = null;	  	  if (!isEmpty())	    front = queue.get(0);	    	  return front;	} // end getFront	// 24.21  	public T dequeue()	{	  T front = null;	  	  if (!isEmpty())	    front = queue.remove(0);	    	  return front;	} // end dequeue				// 24.22  	public boolean isEmpty()	{	  return queue.isEmpty();	} // end isEmpty		// 24.22  	public void clear()	{	  queue.clear();	} // end clear} // end VectorQueue