package Queues.Implementations.TwoPartCircularLinked;import Queues.QueueInterface;/** * A class that implements the ADT queue by using a  * two-part circular chain of nodes. *  * @author Frank M. Carrano * @version 2.0 * @param <T> */public class TwoPartCircularLinkedQueue<T> implements QueueInterface<T>,                                                       java.io.Serializable{   private Node queueNode; // references first node in queue  private Node freeNode;  // references node after back of queue    public TwoPartCircularLinkedQueue()  {    freeNode = new Node(null, null);    freeNode.setNextNode(freeNode);    queueNode = freeNode;  } // end default constructor	// 24.29  	public void enqueue(T newEntry)	{	  freeNode.setData(newEntry);	  if (isChainFull())	  {	    // allocate a new node and insert it after the node that	    // freeNode references	    Node newNode = new Node(null, freeNode.getNextNode());	    freeNode.setNextNode(newNode);	  } // end if	  	  freeNode = freeNode.getNextNode();	} // end enqueue	// 24.30  	public T getFront()	{	  T front = null;	  	  if (!isEmpty())	    front = queueNode.getData();	    	  return front;	} // end getFront	// 24.31	public T dequeue()	{	  T front = null;	  	  if (!isEmpty())	  {	    front = queueNode.getData();	    queueNode.setData(null);	    queueNode = queueNode.getNextNode();	  } // end if	  	  return front;	} // end dequeue	// 24.32	public boolean isEmpty()	{	  return queueNode == freeNode;	} // end isEmpty	public void clear()  	{	  while (!isEmpty())	    dequeue();	} // end clear	// 24.32	private boolean isChainFull()	{	  return queueNode == freeNode.getNextNode();	} // end isChainFull	private class Node implements java.io.Serializable	{		private T    data;  // queue entry		private Node next;  // link to next node		private Node(T dataPortion)		{			data = dataPortion;			next = null;			} // end constructor				private Node(T dataPortion, Node linkPortion)		{			data = dataPortion;			next = linkPortion;			} // end constructor		private T getData()		{			return data;		} // end getData		private void setData(T newData)		{			data = newData;		} // end setData		private Node getNextNode()		{			return next;		} // end getNextNode				private void setNextNode(Node nextNode)		{			next = nextNode;		} // end setNextNode	} // end Node} // end TwoPartCircularLinkedQueue